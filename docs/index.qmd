---
format:
  html:
    toc: false
    page-layout: full
code-annotations: true
---


<div class="column-body" style="display: flex; justify-content: space-between; margin-bottom: 18px;">

<div style="width: 30%; display: flex; justify-content: flex-start; align-items: center;">
<i>Build Modular, LLM-Powered Applications with Ease.</i>
</div>

<div style="width: 20%; display: flex; justify-content: center; align-items: center;">
<video autoplay loop muted playsinline 
onloadstart="this.playbackRate = 4.6" 
style="display: block; max-width: 100px; margin: 0 auto;">
<source src="assets/logo/pyllments_logo_spin_300.mp4" type="video/mp4">
</video>
</div>

<div style="width: 30%; display: flex; flex-direction: column; justify-content: flex-end; align-items: flex-start; line-height: 1em;">
<div style="display: grid; grid-template-columns: 1em 1fr; gap: 0.7em;">
<div>ðŸ§©</div><div>Modular Components</div>
<div>âš¡</div><div>Flow-Based Programming</div>
<div>ðŸŽ¨</div><div>Front End Framework</div>
<div>ðŸ”Œ</div><div>LLM + vDB Integrations</div>
</div>
</div>
</div>

---

::: {.columns}
# What is Pyllments?
:::

Pyllments consists of a set of **Elements** with a consistent interface that allows you to connect them in a near infinite amount of ways through their ports using simple flow-based programming.

Pyllments comes with a set of pre-built parameterized application you can run immediately from the command line like so:
```bash
pyllments recipe run branch_flow --height 900 --width 700
```
[See Recipes Here](recipes)


#### Elements:
* Easily integrate into your own projects
* Have front end components associated with them, which allows you to build your own composable GUIs to interact with your flows
* Can individually or in a flow be served as an API (with limitless endpoints at any given part of the flow)

::: {.column-page}
# Elements are building blocks with a consistent interface
:::

<div class="column-page">
<div class="video-container" style="position: relative; max-width: 100%; margin: 0 auto;">
<video autoplay loop muted playsinline 
style="display: block; max-width: 100%; margin: 0 auto;" 
playbackRate="1">
<source src="assets/introduction/pyllments_intro_pg_vid1.mp4" type="video/mp4">
</video>
<button class="custom-play-button" style="
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 3rem;
padding: 1rem 1.6rem;
color: white;
background: rgba(22, 32, 48, 0.5);
border: 1px solid #D33A4B;
border-radius: 30%;
cursor: pointer;
z-index: 2;">
&#9655;
</button>
</div>
</div>


---

::: {.column-page}
# Elements can create and manage easily composable front-end components called Views
:::

<div class="video-container column-page" style="position: relative; max-width: 100%; margin: 0 auto;">
<video playsinline controls style="width: 100%; display: block;">
<source src="assets/introduction/pyllments_intro_pg_vid2.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>
<!-- Custom play button overlay -->
<button class="custom-play-button" style="
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 3rem;
padding: 1rem 1.6rem;
color: white;
background: rgba(22, 32, 48, 0.5);
border: 1px solid #D33A4B;
border-radius: 30%;
cursor: pointer;
z-index: 2;">
&#9655;
</button>
</div>

---

::: {.column-page}
# Using their `Ports` interface, Elements can be connected in endless permutations.
:::

<div class="column-page">
<div class="video-container" style="position: relative; max-width: 100%; margin: 0 auto;">
<video playsinline controls style="width: 100%; display: block;">
<source src="assets/introduction/pyllments_intro_pg_vid3.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>
<button class="custom-play-button" style="
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 3rem;
padding: 1rem 1.6rem;
color: white;
background: rgba(22, 32, 48, 0.5);
border: 1px solid #D33A4B;
border-radius: 30%;
cursor: pointer;
z-index: 2;">
&#9655;
</button>
</div>
</div>

---

::: {.column-page}
# Attach API endpoints to any part of the flow
:::

<div class="column-page">
<div class="video-container" style="position: relative; max-width: 100%; margin: 0 auto;">
<video playsinline controls style="width: 100%; display: block;">
<source src="assets/introduction/pyllments_intro_pg_vid4.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>
<button class="custom-play-button" style="
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 3rem;
padding: 1rem 1.6rem;
color: white;
background: rgba(22, 32, 48, 0.5);
border: 1px solid #D33A4B;
border-radius: 30%;
cursor: pointer;
z-index: 2;">
&#9655;
</button>
</div>
</div>

```{mermaid}
flowchart LR
subgraph chat_interface_el [ChatInterfaceElement]
  direction TB
  subgraph chat_interface_el_views [Views]
    direction LR
    chatfeed_view:::View ~~~ chat_input_view:::View ~~~ send_button_view:::View
  end
  subgraph chat_interface_el_Ports [Ports]
      direction LR
      subgraph chat_interface_el_input [Input]
          direction TB
          message_input:::InputPort ~~~ message_emit_input:::InputPort
      end
      subgraph chat_interface_el_output [Output]
          direction TB
          message_output:::OutputPort
      end
      chat_interface_el_input ~~~ chat_interface_el_output
  end
  chat_interface_el_views ~~~ chat_interface_el_Ports
end

subgraph llm_chat_el [LLMChatElement]
  direction TB
  subgraph llm_Views [Views]
    direction LR
    model_selector_view:::View
  end
  subgraph llm_Ports [Ports]
      direction LR
      subgraph llm_chat_input [Input]
          direction TB
          messages_input:::InputPort
      end
      subgraph llm_chat_output [Output]
          direction TB
          llm_message_output[message_output]:::OutputPort
      end
      llm_chat_input ~~~ llm_chat_output
  end
  llm_Views ~~~ llm_Ports
end

message_output --MessagePayload--> messages_input
```


Key Features:

-   Modular Architecture: Build applications using interconnected Elements, each containing its own business logic and visualization components.

-   Reactive Design: Utilizes the Param library for reactive programming, ensuring seamless updates between models and views.

-   Visualization Support: Leverages the Panel library for creating interactive web-based user interfaces.

-   LLM Integration: Easily incorporate Large Language Models into your applications.

-   Flexible Connectivity: Elements communicate through input and output ports, allowing for complex data flows. Payload System: A versatile payload system for handling various types of data, including text, images, and audio.

<!-- Global script to attach play button functionality to all video containers -->
<script>
// This script finds every video container and adds a central play overlay behavior.
document.querySelectorAll('.video-container').forEach(container => {
// Select the video element within the current container.
const video = container.querySelector('video');
// Select the overlay play button.
const playButton = container.querySelector('.custom-play-button');

// When playback begins, hide the play button.
video.addEventListener('play', () => {
playButton.style.display = 'none';
});

// When playback is paused, show the play button.
video.addEventListener('pause', () => {
playButton.style.display = 'block';
});

// Clicking on the overlay play button resumes playback.
playButton.addEventListener('click', () => {
video.play();
});

// For videos without native controls (like our first video), 
// add a click event to pause the video when clicked.
if (!video.hasAttribute('controls')) {
video.addEventListener('click', () => {
if (!video.paused) {
video.pause();
}
});
}
});
</script>
