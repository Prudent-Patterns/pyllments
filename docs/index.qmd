---
format:
  html:
    toc: false
    page-layout: full
code-annotations: true
description: "Build Modular, LLM-Powered Applications with Ease."
---


<div class="column-body" style="display: flex; justify-content: space-between; margin-bottom: 18px;">

<div style="width: 30%; display: flex; justify-content: flex-start; align-items: center;">
<i>Build Modular, LLM-Powered Applications with Ease.</i>
</div>

<div style="width: 20%; display: flex; justify-content: center; align-items: center;">
<video autoplay loop muted playsinline 
onloadstart="this.playbackRate = 4.6" 
style="display: block; max-width: 100px; margin: 0 auto;">
<source src="assets/logo/pyllments_logo_spin_300.mp4" type="video/mp4">
</video>
</div>

<div style="width: 30%; display: flex; flex-direction: column; justify-content: flex-end; align-items: flex-start; line-height: 1em;">
<div style="display: grid; grid-template-columns: 1em 1fr; gap: 0.7em;">
<div>ðŸ§©</div><div>Modular Components</div>
<div>âš¡</div><div>Flow-Based Programming</div>
<div>ðŸŽ¨</div><div>Front End Framework</div>
<div>ðŸ”Œ</div><div>LLM + vDB Integrations</div>
</div>
</div>
</div>

---

::: {.columns}
# What is Pyllments?
:::

```bash
uv pip install pyllments
```
[More info on installation](installation.qmd)

Pyllments is a Python library that empowers you to build rich, interactive applications powered by large language models. 
It provides a collection of modular **Elements**, each encapsulating its data, logic, and UIâ€”that communicate through well-defined input and output ports. 
With simple flow-based programming, you can effortlessly compose, customize, and extend components to create everything from dynamic GUIs to scalable API-driven services.

It comes prepackaged with a set of parameterized application you can run immediately from the command line like so:
```bash
pyllments recipe run branch_chat --height 900 --width 700
```
[See Recipes Here](recipes)

#### Elements:
* Easily integrate into your own projects
* Have front end components associated with them, which allows you to build your own composable GUIs to interact with your flows
* Can individually or in a flow be served as an API (with limitless endpoints at any given part of the flow)

## Chat App Example
### With history, a custom system prompt, and an interface.
![Chat Flow (Click to Enlarge)](assets/introduction/intro_example_flow.jpg){.lightbox}

<div class="video-container" style="position: relative; max-width: 100%; margin: 0 auto;">
<video autoplay loop muted playsinline 
style="display: block; max-width: 100%; margin: 0 auto;" 
playbackRate="1">
<source src="assets/introduction/intro_flow.mp4" type="video/mp4">
</video>
<button class="custom-play-button" style="
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 3rem;
padding: 1rem 1.6rem;
color: white;
background: rgba(22, 32, 48, 0.5);
border: 1px solid #D33A4B;
border-radius: 30%;
cursor: pointer;
z-index: 2;">
&#9655;
</button>
</div>

In this example, we'll build a simple chat application using four core Elements from the Pyllments library. Elements are modular components that handle specific functions and connect via ports to form a data flow graph.

1. **ChatInterfaceElement**  
   Manages the chat GUI, including the input box for typing messages, a send button, and a feed to display the conversation. It emits user messages and renders incoming responses.

2. **HistoryHandlerElement**  
   Maintains a running log of all messages (user and assistant) and tool responses. It can emit the current message history to be used as context for the LLM.

3. **ContextBuilderElement**  
   Combines multiple inputs into a structured list of messages for the LLM. This includes a predefined system prompt (e.g., setting the AI's personality), the conversation history, and the latest user query.

4. **LLMChatElement**  
   Connects to a Large Language Model (LLM) provider, sends the prepared message list, and generates a response. It also offers a selector to choose different models or providers.

Here's what happens step by step in the chat flow:

1. **User Input**: You type a message in the `ChatInterfaceElement` and click send. This creates a `MessagePayload` with your text and the role 'user'.  
2. **History Update**: Your message is sent via a port to the `HistoryHandlerElement`, which adds it to the conversation log.  
3. **Context Building**: The `ContextBuilderElement` receives your message and constructs the full context. It combines:  
   - A fixed system prompt (e.g., "You are Marvin, a Paranoid Android."),  
   - The message history from `HistoryHandlerElement` (if available, up to a token limit),  
   - Your latest query.  
4. **LLM Request**: This combined list is sent through a port to the `LLMChatElement`, which forwards it to the selected LLM (like OpenAI's GPT-4o-mini).  
5. **Response Handling**: The LLM's reply is packaged as a new `MessagePayload` with the role 'assistant' and sent back to the `ChatInterfaceElement` to be displayed in the chat feed.  
6. **History Update (Again)**: The assistant's response is also sent to the `HistoryHandlerElement`, updating the log for the next interaction.  
7. **Cycle Repeats**: The process loops for each new user message, building context anew each time.

**chat_flow.py**
```python
from pyllments import flow
from pyllments.elements import ChatInterfaceElement, LLMChatElement, HistoryHandlerElement

# Instantiate the elements
chat_interface_el = ChatInterfaceElement()
llm_chat_el = LLMChatElement()
history_handler_el = HistoryHandlerElement(history_token_limit=3000)
context_builder_el = ContextBuilderElement(
    input_map={
        'system_prompt_constant': {
            'role': "system",
            'message': "You are Marvin, a Paranoid Android."
        },
        'history': {'ports': [history_handler_el.ports.message_history_output]},
        'query': {'ports': [chat_interface_el.ports.user_message_output]},
    },
    emit_order=['system_prompt_constant', '[history]', 'query']
)
# Connect the elements
chat_interface_el.ports.user_message_output > history_handler_el.ports.message_input
context_builder_el.ports.messages_output > llm_chat_el.ports.messages_input
llm_chat_el.ports.message_output > chat_interface_el.ports.message_emit_input
chat_interface_el.ports.assistant_message_output > history_handler_el.ports.message_emit_input

# Create the visual elements and wrap with @flow decorator to serve with pyllments
@flow
def interface():
    width = 950
    height = 800
    interface_view = chat_interface_el.create_interface_view(width=int(width*.75))
    model_selector_view = llm_chat_el.create_model_selector_view(
        models=config.custom_models, 
        model=config.default_model
        )
    history_view = history_handler_el.create_context_view(width=int(width*.25))

    main_view = pn.Row(
        pn.Column(
            model_selector_view,
            pn.Spacer(height=10),
            interface_view,
        ),
        pn.Spacer(width=10),
        history_view,
        styles={'width': 'fit-content'},
        height=height
    )
    return main_view
```
**CLI Command**
```bash
pyllments serve chat_flow.py
```

For more in-depth material, check our [Getting Started Tutorial](getting_started)

::: {.column-page}
# Elements are building blocks with a consistent interface
:::


<div class="column-page">
<div class="video-container" style="position: relative; max-width: 100%; margin: 0 auto;">
<video loop muted playsinline 
style="display: block; max-width: 100%; margin: 0 auto;" 
playbackRate="1">
<source src="assets/introduction/pyllments_intro_pg_vid1.mp4" type="video/mp4">
</video>
<button class="custom-play-button" style="
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 3rem;
padding: 1rem 1.6rem;
color: white;
background: rgba(22, 32, 48, 0.5);
border: 1px solid #D33A4B;
border-radius: 30%;
cursor: pointer;
z-index: 2;">
&#9655;
</button>
</div>
</div>


---

::: {.column-page}
# Elements can create and manage easily composable front-end components called Views
:::

<div class="video-container column-page" style="position: relative; max-width: 100%; margin: 0 auto;">
<video playsinline controls style="width: 100%; display: block;">
<source src="assets/introduction/pyllments_intro_pg_vid2.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>
<!-- Custom play button overlay -->
<button class="custom-play-button" style="
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 3rem;
padding: 1rem 1.6rem;
color: white;
background: rgba(22, 32, 48, 0.5);
border: 1px solid #D33A4B;
border-radius: 30%;
cursor: pointer;
z-index: 2;">
&#9655;
</button>
</div>

---

::: {.column-page}
# Using their `Ports` interface, Elements can be connected in endless permutations.
:::

<div class="column-page">
<div class="video-container" style="position: relative; max-width: 100%; margin: 0 auto;">
<video playsinline controls style="width: 100%; display: block;">
<source src="assets/introduction/pyllments_intro_pg_vid3.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>
<button class="custom-play-button" style="
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 3rem;
padding: 1rem 1.6rem;
color: white;
background: rgba(22, 32, 48, 0.5);
border: 1px solid #D33A4B;
border-radius: 30%;
cursor: pointer;
z-index: 2;">
&#9655;
</button>
</div>
</div>

---

::: {.column-page}
# Attach API endpoints to any part of the flow
:::

<div class="column-page">
<div class="video-container" style="position: relative; max-width: 100%; margin: 0 auto;">
<video playsinline controls style="width: 100%; display: block;">
<source src="assets/introduction/pyllments_intro_pg_vid4.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>
<button class="custom-play-button" style="
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 3rem;
padding: 1rem 1.6rem;
color: white;
background: rgba(22, 32, 48, 0.5);
border: 1px solid #D33A4B;
border-radius: 30%;
cursor: pointer;
z-index: 2;">
&#9655;
</button>
</div>
</div>

Key Features:

-   Modular Architecture: Build applications using interconnected Elements, each containing its own business logic and visualization components.

-   Reactive Design: Utilizes the Param library for reactive programming, ensuring seamless updates between models and views.

-   Visualization Support: Leverages the Panel library for creating interactive web-based user interfaces.

-   LLM Integration: Easily incorporate Large Language Models into your applications.

-   Flexible Connectivity: Elements communicate through input and output ports, allowing for complex data flows. Payload System: A versatile payload system for handling various types of data, including text, images, and audio.

<!-- Global script to attach play button functionality to all video containers -->
<script>
// This script finds every video container and adds a central play overlay behavior.
document.querySelectorAll('.video-container').forEach(container => {
// Select the video element within the current container.
const video = container.querySelector('video');
// Select the overlay play button.
const playButton = container.querySelector('.custom-play-button');

// When playback begins, hide the play button.
video.addEventListener('play', () => {
playButton.style.display = 'none';
});

// When playback is paused, show the play button.
video.addEventListener('pause', () => {
playButton.style.display = 'block';
});

// Clicking on the overlay play button resumes playback.
playButton.addEventListener('click', () => {
video.play();
});

// For videos without native controls (like our first video), 
// add a click event to pause the video when clicked.
if (!video.hasAttribute('controls')) {
video.addEventListener('click', () => {
if (!video.paused) {
video.pause();
}
});
}
});
</script>
