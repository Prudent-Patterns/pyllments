---
title: "ContextBuilder"
---

## Overview

The `ContextBuilder` helps you build an ordered list of messages from incoming payloads and preset messages. It provides flexible ways to combine messages from different sources and emit them in a specific order. For example, a resulting message sequence might look like:

```
SYSTEM_CONSTANT_MESSAGE,
user_port_payload,
assistant_port_payload,
TEMPLATE_SYSTEM_MESSAGE
```

## Instantiation

When initializing a `ContextBuilder`, you must provide either an `input_map` or a `connected_input_map` (or both), as well as optional settings like `emit_order`, `trigger_map`, `build_fn`, and `outgoing_input_port`.

---

### 1. `input_map`

This is a dictionary used to create input ports, constants, and templates. Each key maps to a configuration dictionary with specific properties based on the entry type:

- **Regular ports**: Keys without special suffixes create input ports
- **Constants**: Keys ending with `_constant` create preset messages
- **Templates**: Keys ending with `_template` create dynamic messages using Jinja2 templates

**Port Configuration Options:**
- `role`: The role to assign to the message (e.g., 'user', 'assistant', 'system')
- `payload_type`: The expected payload type (e.g., `MessagePayload`, `list[MessagePayload]`)
- `persist`: Boolean flag indicating whether the payload should persist after being used (defaults to `False`)
- `callback`: Optional function to transform the payload when received (e.g., `lambda payload: do_something(payload.model.content)`)

**Constant Configuration Options:**
- `role`: The role to assign to the message
- `message`: The content of the constant message

**Template Configuration Options:**
- `role`: The role to assign to the message
- `template`: Jinja2 template string that can reference other port contents

**Example:**

```python
input_map = {
    'port_a': {
        'role': 'user', 
        'payload_type': MessagePayload, 
        'persist': True,
        'callback': lambda payload: payload.model.content.strip()
    },
    'port_b': {'role': 'assistant', 'payload_type': list[MessagePayload]}, 
    'user_constant': {'role': 'user', 'message': "This text will be a user message"}, 
    'system_template': {'role': 'system', 'template': "{{ port_a }}  --  {{ port_b }}"}
}
```

*Comment:* This creates two input ports (with a callback for port_a), a constant user message, and a template that combines content from both ports.

---

### 2. `connected_input_map`

This mapping works similarly to `input_map`, but it automatically connects the created ports to existing output ports from other elements. The structure is similar to `input_map` but uses a `ports` key to specify connections.

**Port Configuration Options:**

- `role`: The role to assign to the message
- `ports`: List of output ports to connect to this input port
- `persist`: Boolean flag indicating whether the payload should persist after being used (defaults to `False`)
- `callback`: Optional function to transform the payload when received

**Example:**

```python
connected_input_map = {
    'port_a': {
        'role': 'user', 
        'ports': [el1.ports.some_output],
        'callback': lambda payload: f"Processed: {payload.model.content}"
    },
    'port_b': {'role': 'assistant', 'persist': True, 'ports': [el2.ports.some_output]},
    'system_constant': {'role': 'system', 'message': "This text will be a system message"},
    'system_template': {'role': 'system', 'template': "{{ port_a }}  --  {{ port_b }}"}
}
```

*Comment:* Here, `port_a` and `port_b` are connected to the outputs of other elements (with a callback for port_a), while `system_constant` is a constant message and `system_template` is a dynamic template.

---

### 3. `emit_order`

The `emit_order` parameter provides a simple way to specify the order in which messages should be emitted. The ContextBuilder will wait until all required payloads are available before emitting.

**Example:**

```python
emit_order = ['port_a', 'port_b', 'system_constant', 'system_template']
```

*Comment:* This specifies that messages should be emitted in the order listed, once all required payloads are available.

---

### 4. `trigger_map`

The `trigger_map` establishes rules for when the `ContextBuilder` should emit messages. Each key corresponds to a triggering port and points to an ordered list of ports, constants, or templates that should be included in the emission when that port receives a payload.

**Example:**

```python
trigger_map = {
    'port_a': ['port_a', 'port_b', 'system_constant'],
    'port_b': ['port_b', 'system_constant']
}
```

*Comment:* In this example, if `port_a` receives a payload, the builder will emit messages from `port_a`, `port_b`, and the system constant (if all are available). If `port_b` receives a payload, only `port_b` and the system constant will be included.

---

### 5. `build_fn`

For more complex control over the message building process, you can define a custom build function. This function is called every time any port receives a payload and receives:

- All defined ports and their payloads
- The `active_input_port` parameter indicating which port just received a payload
- A persistent dictionary `c` for storing state between calls

Your function should return a list of port/message names that should be processed and emitted.

**Example:**

```python
def build_fn(port_a, port_b, system_constant, active_input_port, c):
    if active_input_port == port_a:
        return [port_a, port_b, system_constant]
    else:
        return [port_b, system_constant]
```

*Comment:* This sample build function adjusts the emission order based on which port was activated.

---

### 6. `outgoing_input_port`

This parameter identifies the port to which the `ContextBuilder`'s output will be sent. You can assign it either during instantiation or manually connect it afterwards.

**Example (during instantiation):**

```python
cb = ContextBuilder(..., outgoing_input_port=some_element.ports.some_input_port)
```

**Alternatively, manually connecting after initialization:**

```python
cb = ContextBuilder(...)
cb.ports.messages_output > some_element.ports.some_input_port
```

*Comment:* This ensures that the accumulated messages are correctly routed to the intended downstream component.

---

## Processing Strategies

The ContextBuilder uses several strategies to determine when and how to emit messages, in the following order of priority:

1. **Custom build function**: If `build_fn` is provided, it has the highest priority
2. **Trigger map**: If the active port is in the `trigger_map`, that ordering is used
3. **Emit order**: If all required ports for the `emit_order` are available, that ordering is used
4. **Default behavior**: If all required regular ports have payloads, use the order from the input maps

## Callbacks

Callbacks provide a way to transform payloads as they are received by the ContextBuilder. This is useful for preprocessing or filtering payload content before it's used in message construction.

**Example:**

```python
'port_a': {
    'role': 'user',
    'payload_type': MessagePayload,
    'callback': lambda payload: payload.model.content.upper()  # Convert to uppercase
}
```

Callbacks receive the raw payload and should return the transformed payload or value. The transformation is applied before the payload is stored or used in template rendering.

## Templates

Templates use Jinja2 syntax and can reference the content of any port payload. The template will only be rendered when all referenced ports have received payloads.

**Example:**

```python
'system_template': {'role': 'system', 'template': "Context: {{ port_a }}\nAdditional info: {{ port_b }}"}
```

*Comment:* This creates a system message that combines the content from `port_a` and `port_b`.

---

## Payload Persistence

By default, port payloads are cleared after being used in a message emission, unless:

1. The port is marked with `'persist': True` in its configuration
2. The port is the one that just received a payload (triggering the current processing)
3. The port is a constant or template (these always persist)

This behavior allows you to control which inputs should be reused across multiple emissions.

---

## Summary

The `ContextBuilder` is a powerful tool for managing and sequencing message payloads. By configuring the input maps, emission rules, and optionally a custom build function, you can effectively control how messages are accumulated and emitted within your system.

Happy building!