[
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting Started Tutorial",
    "section": "",
    "text": "1. Creating your first element\n\n\n2. Connecting elements\n\n\n3. Building your first flow\n\n\n4. Testing your flow\n\n\n5. Deploying your flow",
    "crumbs": [
      "Getting Started",
      "üéì Getting Started Tutorial"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "What is Pyllments?",
    "section": "",
    "text": "Build Modular, LLM-Powered Applications with Ease.\n\n\n\n\n\n\n\n\n\nüß©\n\n\nModular Components\n\n\n‚ö°\n\n\nFlow-Based Programming\n\n\nüé®\n\n\nFront End Framework\n\n\nüîå\n\n\nLLM + vDB Integrations\n\n\n\n\n\n\n\n\n\n\nPyllments consists of a set of Elements with a consistent interface that allows you to connect them in a near infinite amount of ways through their ports using simple flow-based programming.\n\nElements:\n\nEasily integrate into your own projects\nHave front end components associated with them, which allows you to build your own composable GUIs to interact with your flows\nCan individually or in a flow be served as an API (with limitless endpoints at any given part of the flow)\n\n\n\nElements are building blocks with a consistent interface\n\n\n\n\n\n\n\n‚ñ∑\n\n\n\n\n\nElements can create and manage easily composable front-end components called Views\n\n\n\n\nYour browser does not support the video tag.    ‚ñ∑ \n\n\n\nUsing their Ports interface, Elements can be connected in endless permutations.\n\n\n\n\n\nYour browser does not support the video tag.   ‚ñ∑ \n\n\n\n\nAttach API endpoints to any part of the flow\n\n\n\n\n\nYour browser does not support the video tag.   ‚ñ∑ \n\n\n\nExample\nfrom pyllments.elements.chat_interface import ChatInterfaceElement, LLMChatElement\n\n1chat_interface = ChatInterfaceElement()\nllm_chat = LLMChatElement()\n\n2chat_interface.ports.output['message_output'] &gt; llm_chat.ports.input['message_input']\n\n1\n\n(üëà Press Me) Create a the chat interface and LLM chat elements\n\n2\n\nConnect the chat interface element‚Äôs output port to the LLM chat element‚Äôs input port\n\n\n\n\n\n\n\nflowchart LR\nsubgraph chat_interface_el [ChatInterfaceElement]\n  direction TB\n  subgraph chat_interface_el_views [Views]\n    direction LR\n    chatfeed_view:::View ~~~ chat_input_view:::View ~~~ send_button_view:::View\n  end\n  subgraph chat_interface_el_Ports [Ports]\n      direction LR\n      subgraph chat_interface_el_input [Input]\n          direction TB\n          message_input:::InputPort ~~~ message_emit_input:::InputPort\n      end\n      subgraph chat_interface_el_output [Output]\n          direction TB\n          message_output:::OutputPort\n      end\n      chat_interface_el_input ~~~ chat_interface_el_output\n  end\n  chat_interface_el_views ~~~ chat_interface_el_Ports\nend\n\nsubgraph llm_chat_el [LLMChatElement]\n  direction TB\n  subgraph llm_Views [Views]\n    direction LR\n    model_selector_view:::View\n  end\n  subgraph llm_Ports [Ports]\n      direction LR\n      subgraph llm_chat_input [Input]\n          direction TB\n          messages_input:::InputPort\n      end\n      subgraph llm_chat_output [Output]\n          direction TB\n          llm_message_output[message_output]:::OutputPort\n      end\n      llm_chat_input ~~~ llm_chat_output\n  end\n  llm_Views ~~~ llm_Ports\nend\n\nmessage_output --MessagePayload--&gt; messages_input\n\n\n\n\n\n\nKey Features:\n\nModular Architecture: Build applications using interconnected Elements, each containing its own business logic and visualization components.\nReactive Design: Utilizes the Param library for reactive programming, ensuring seamless updates between models and views.\nVisualization Support: Leverages the Panel library for creating interactive web-based user interfaces.\nLLM Integration: Easily incorporate Large Language Models into your applications.\nFlexible Connectivity: Elements communicate through input and output ports, allowing for complex data flows. Payload System: A versatile payload system for handling various types of data, including text, images, and audio.",
    "crumbs": [
      "Getting Started",
      "üöÄ Introduction"
    ]
  },
  {
    "objectID": "recipes/index.html",
    "href": "recipes/index.html",
    "title": "Recipes",
    "section": "",
    "text": "Recipes are pre-made flows that you can run straight from the command line.\nClick on a recipe to see more details and configuration options.\npyllments recipe run &lt;recipe-name&gt; [&lt;args&gt;...]\n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nBranching Chat Flow\n\n\nCreate a multi-tabbed chat interface that allows users to branch conversations and create new ones.\n\n\n\n\nMulti Chat Flow\n\n\nA multi chat flow recipe\n\n\n\n\nSimple Flow\n\n\nA simple flow recipe\n\n\n\n\nSimple Flow API\n\n\nA simple flow API recipe\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Getting Started",
      "üë®‚Äçüç≥ Recipes"
    ]
  },
  {
    "objectID": "recipes/simple_flow_api.html",
    "href": "recipes/simple_flow_api.html",
    "title": "Simple Flow API",
    "section": "",
    "text": "pyllments recipe run simple_flow_api",
    "crumbs": [
      "Getting Started",
      "üë®‚Äçüç≥ Recipes",
      "Simple Flow API"
    ]
  },
  {
    "objectID": "recipes/simple_flow.html",
    "href": "recipes/simple_flow.html",
    "title": "Simple Flow",
    "section": "",
    "text": "pyllments recipe run simple_flow",
    "crumbs": [
      "Getting Started",
      "üë®‚Äçüç≥ Recipes",
      "Simple Flow"
    ]
  },
  {
    "objectID": "recipes/branch_flow/index.html",
    "href": "recipes/branch_flow/index.html",
    "title": "Branching Chat Flow",
    "section": "",
    "text": "pyllments recipe run branch_flow\n\nConfiguration\n\n\n\n\n\n\n\n\n\nArgument\nExample\nDescription\nDefault\n\n\n\n\nwidth\n800\nWidth of the chat interface.\n800\n\n\nheight\n942\nHeight of the application.\n942\n\n\ncustom_models\nSee Below\nAdd custom LLM models and/or base urls.\n‚Äú{}‚Äù\n\n\n\n\n\n\n\n\n\n\n\n\nBranch Flow GUI\n\n\n\n\n\n\n\nBranch Flow Flow Diagram\n\n\n\n\n\nThis recipe enables both entirely new chats and forked conversations from existing ones, managed by an integrated flow system.\n\nNew Chat: Start fresh conversations.\nBranching: Fork from existing chats, optionally copying messages.\nTabbed Interface: Manage multiple chats/branches simultaneously.\nLLM Integration: Seamlessly connects UI with LLM backend.",
    "crumbs": [
      "Getting Started",
      "üë®‚Äçüç≥ Recipes",
      "Branching Chat Flow"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\npyllments serve flow.py --logging=True"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "This be my introduction"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation Instructions",
    "section": "",
    "text": "You can install Pyllments using either of the following methods:\n\nUsing pipUsing uv pip\n\n\npip install pyllments\n\n\nuv pip install pyllments",
    "crumbs": [
      "Getting Started",
      "üîß Installation"
    ]
  }
]